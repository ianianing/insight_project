from datetime import datetime
from flaskblog import db, login_manager
from flask_login import UserMixin
from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
from flask import current_app

# make sure registered user can login
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


class User(db.Model, UserMixin): # inherit from db.model
    id = db.Column(db.Integer, primary_key=True) # unique id for db
    username = db.Column(db.String(20), unique=True, nullable=False) # username is 20 string, has to be unique, cannot be null
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default='default.jpg')
    password = db.Column(db.String(60), nullable=False)
    posts = db.relationship('Post', backref='author', lazy=True) #Post attribute has relationship to post model, if post, use user as author

    # define function that will generate a token which expires in 1800 second
    def get_reset_token(self,expires_sec=1800):
        s = Serializer(current_app.config['SECRET_KEY'],expires_sec)
        return s.dumps({'user_id':self.id}).decode('utf-8')

    # define function that verify the reset token generated by above function
    @staticmethod # let python know not take self as argument but only token
    def verify_reset_token(token):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            user_id = s.loads(token)['user_id']
        except:
            return None # return nothing if not able to get user_id, can happen with wrong or expired token
        return User.query.get(user_id) # return user with that user id if can get user_id by token

    def __repr__(self): #define how function print things
        return f"User('{self.username}','{self.email}','{self.image_file}')"

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow) #setup post time, default is current utc time, note, not using utcnow(), no paraphathesis
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False) # user id refer to user.id in User table

    def __repr__(self): #define how function print things
        return f"User('{self.title}','{self.date_posted}')"

